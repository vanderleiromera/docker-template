# run .env: export $(cat .env)
# for run: docker stack deploy -c stack-inverseproxy.yaml inverseproxy
# for rm:  docker stack rm inverseproxy
# https://github.com/moby/moby/issues/29133
# printenv | grep TRAEFIK_DOMAIN
version: "3"

services:
  proxy:
    image: traefik:v2.7
    ports:
      - 80:80
      - 443:443
    depends_on:
      - dockersocket
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config.yml:/etc/traefik/config.yml:ro
      - ./certs:/etc/certs:rw,Z
      - ./acme/acme.json:/acme.json
      # So that Traefik can listen to the Docker events
      #- /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      shared:
      private:
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=inverseproxy_shared"
        - "traefik.constraint-label=inverseproxy_shared"
        - "traefik.http.routers.proxy.rule=Host(`${TRAEFIK_DOMAIN}`) &&
          (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
        - "traefik.http.middlewares.proxy-redirectscheme.redirectscheme.scheme=https"
        - "traefik.http.middlewares.proxy-redirectscheme.redirectscheme.permanent=true"
        - "traefik.http.middlewares.def-compress.compress=true"
        - "traefik.http.middlewares.strip.stripprefix.prefixes=/dashboard"
        - "traefik.http.services.proxy.loadbalancer.server.port=888" # required by swarm but not used.
        - "traefik.http.routers.proxy.entrypoints=https"
        - "traefik.http.routers.proxy.tls.certresolver=cloudflare"
        - "traefik.http.routers.proxy.tls.domains[0].main=${TRAEFIK_DOMAIN}"
        - "traefik.http.routers.proxy.tls.domains[0].sans=*.${TRAEFIK_DOMAIN}"
        - "traefik.http.routers.proxy.service=api@internal"
        - "traefik.http.middlewares.auth.basicauth.usersfile=/etc/certs/usersfile"
        - "traefik.http.routers.proxy.middlewares=auth,secure@file,def-compress,strip"
        - "traefik.http.routers.proxy.tls=true"
        - "providers.file.filename=/etc/traefik/config.yml"

  dockersocket:
    image: tecnativa/docker-socket-proxy
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    privileged: true
    networks:
      private:
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      CONTAINERS: 1
      NETWORKS: 1
      SERVICES: 1
      SWARM: 1
      TASKS: 1

networks:
  shared:
    internal: true
    driver_opts:
      encrypted: 1

  private:
    internal: true
    driver_opts:
      encrypted: 1

volumes:
  acme:
