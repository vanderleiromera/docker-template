version: "3"

services:
  proxy:
    image: traefik:v2.7
    ports:
      - 80:80
      - 443:443
    depends_on:
      - dockersocket
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config.yml:/etc/traefik/config.yml:ro
      - ./certs:/etc/certs:rw,Z
      - ./acme/acme.json:/acme.json
      # So that Traefik can listen to the Docker events
      #- /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      shared:
      private:
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=inverseproxy_shared"
        - "traefik.constraint-label=inverseproxy_shared"
        - "traefik.http.routers.traefik.rule=Host(`devstillus.xyz`)"
        - "traefik.http.services.traefik.loadbalancer.server.port=888" # required by swarm but not used.
        - "traefik.http.routers.traefik.entrypoints=https"
        - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
        - "traefik.http.routers.traefik.tls.domains[0].main=devstillus.xyz"
        - "traefik.http.routers.traefik.tls.domains[0].sans=*.devstillus.xyz"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.middlewares.auth.basicauth.usersfile=/etc/certs/usersfile"
        - "traefik.http.routers.traefik.middlewares=auth,secure@file"

  dockersocket:
    image: tecnativa/docker-socket-proxy
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    privileged: true
    networks:
      private:
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      CONTAINERS: 1
      NETWORKS: 1
      SERVICES: 1
      SWARM: 1
      TASKS: 1

volumes:
  acme:

networks:
  shared:
    internal: true
    driver_opts:
      encrypted: 1

  private:
    internal: true
    driver_opts:
      encrypted: 1
